#version 330

in vec2 texCoord;
in vec3 normal;
in vec3 worldPosition;

out vec4 fragColor;

struct BaseLight
{
    vec3 color;
    float intensity;
};

struct DirectionalLight
{
    BaseLight baseLight;
    vec3 direction;
};

uniform vec3 baseColor;
uniform vec3 ambientLight;
uniform vec3 eyePosition;
uniform DirectionalLight directionalLight;
uniform float specularIntensity;
uniform float specularExponent;
uniform sampler2D sampler;

vec4 calculateLight(BaseLight baseLight, vec3 direction, vec3 normal)
{
    float diffuseFactor = dot(normal, -direction);
    vec4 diffuseColor = vec4(0, 0, 0, 0);
    vec4 specularColor = vec4(0, 0, 0, 0);
    if(diffuseFactor > 0)
    {
        diffuseColor = vec4(baseLight.color, 1) * baseLight.intensity * diffuseFactor;
        vec3 directionToEye = normalize(eyePosition - worldPosition);
        vec3 directionOfReflection = normalize(reflect(direction, normal));
        float specularFactor = dot(directionToEye, directionOfReflection);
        specularFactor = pow(specularFactor, specularExponent);
        if(specularFactor > 0)
            specularColor = vec4(baseLight.color, 1) * specularIntensity * specularFactor;
    }
    return diffuseColor + specularColor;
}

vec4 calculateDirectionalLight(DirectionalLight directionalLight, vec3 normal)
{
    return calculateLight(directionalLight.baseLight, -directionalLight.direction, normal);
}

void main()
{
    vec4 totalLight = vec4(ambientLight, 1);
    vec4 color = vec4(baseColor, 1);
    vec4 texColor = texture(sampler, texCoord.xy);
    if(texColor != vec4(0, 0, 0, 0))
        color *= texColor;
    vec3 surfaceNormal = normalize(normal);
    totalLight += calculateDirectionalLight(directionalLight, surfaceNormal);
    fragColor = color * totalLight;
}